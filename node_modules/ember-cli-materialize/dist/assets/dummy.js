define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', './config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/components/materialize-button-submit', ['exports', './materialize-button'], function (exports, materializeButton) {

  'use strict';

  exports['default'] = materializeButton['default'].extend({
    layoutName: "components/materialize-button",
    tagName: "button",
    attributeBindings: ["type"],
    type: "submit" });

});
define('dummy/components/materialize-button', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    didInsertElement: function () {
      this._super();
      Ember['default'].run.scheduleOnce("afterRender", this, function () {
        var Waves = window.Waves || {};
        if (typeof Waves.displayEffect === "function") {
          Waves.displayEffect();
        }
      });
    },
    tagName: "a",
    classNameBindings: ["btn:waves-effect", "isFlat::waves-light", "isDisabled:disabled:waves-effect", "buttonClass"],
    text: null,
    icon: null,
    iconPosition: "left",
    buttonType: null,
    isFlat: Ember['default'].computed.equal("buttonType", "flat"),
    isDisabled: false,
    buttonClass: (function () {
      if (!this.get("buttonType")) {
        return "btn";
      } else {
        return "btn-" + this.get("buttonType");
      }
    }).property("buttonType"),
    click: function () {
      this.sendAction();
    } });

});
define('dummy/components/materialize-navbar', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    didInsertElement: function () {
      this._super();
      Ember['default'].run.scheduleOnce("afterRender", this, function () {
        if (typeof $(".button-collapse").sideNav === "function") {
          $(".button-collapse").sideNav();
        }
      });
    },
    tagName: "nav" });

});
define('dummy/ember-cli-materialize/tests/ember-cli-materialize/initializers/link-view.jshint', function () {

  'use strict';

  module("JSHint - ember-cli-materialize/initializers");
  test("ember-cli-materialize/initializers/link-view.js should pass jshint", function () {
    ok(true, "ember-cli-materialize/initializers/link-view.js should pass jshint.");
  });

});
define('dummy/initializers/app-version', ['exports', '../config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;

  exports['default'] = {
    name: "App Version",
    initialize: function (container, application) {
      var appName = classify(application.toString());
      Ember['default'].libraries.register(appName, config['default'].APP.version);
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', '../config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal) {
      window[classifiedName] = application;
    }
  };

  exports['default'] = {
    name: "export-application-global",

    initialize: initialize
  };
  exports.__esModule = true;

});
define('dummy/initializers/link-view', ['exports', 'ember-cli-materialize/initializers/link-view'], function (exports, link_view) {

  'use strict';

  exports['default'] = {
    name: "link-view",
    initialize: link_view.initialize
  };

});
define('dummy/router', ['exports', 'ember', './config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {
    this.route("buttons");
    this.route("navbar");
  });

  exports['default'] = Router;

});
define('dummy/routes/buttons', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    actions: {
      debug: function () {
        console.debug("Action debug sended");
      }
    }
  });

});
define('dummy/templates/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n  <li>");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "buttons", options) : helperMissing.call(depth0, "link-to", "buttons", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</li>\n  <li>");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "navbar", options) : helperMissing.call(depth0, "link-to", "navbar", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</li>\n");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("Buttons");
    }

  function program4(depth0,data) {
    
    
    data.buffer.push("Navbar");
    }

    stack1 = (helper = helpers['materialize-navbar'] || (depth0 && depth0['materialize-navbar']),options={hash:{
      'name': ("ember-cli-materialize")
    },hashTypes:{'name': "STRING"},hashContexts:{'name': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-navbar", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n");
    stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    
  });

});
define('dummy/templates/buttons', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push("<div class=\"section index-banner\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col s12 m9\">\n        <h1 class=\"header\">Buttons</h1>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class='container'>\n  <div class=\"section\">\n    <div class=\"intro\">\n        <h4 class=\"col s12 header\">The component supports many options:</h4>\n        <ul>\n          <li>text, default value <span class=\"default-value badge\">null</span></li>\n          <li>action, default value <span class=\"default-value badge\">null</span></li>\n          <li>icon, default value <span class=\"default-value badge\">null</span></li>\n          <li>iconPosition, default value <span class=\"default-value badge\">left</span></li>\n          <li>buttonType, default value <span class=\"default-value badge\">null</span></li>\n          <li>isDisabled, default value <span class=\"default-value badge\">false</span></li>\n        </ul>\n      </div>\n  </div>\n  <div class=\"section\">\n    <h4 class=\"col s12 header\">Raised</h4>\n    <div class=\"button-example\">\n      ");
    data.buffer.push(escapeExpression((helper = helpers['materialize-button'] || (depth0 && depth0['materialize-button']),options={hash:{
      'text': ("Button"),
      'action': ("debug")
    },hashTypes:{'text': "STRING",'action': "STRING"},hashContexts:{'text': depth0,'action': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-button", options))));
    data.buffer.push("\n      ");
    data.buffer.push(escapeExpression((helper = helpers['materialize-button'] || (depth0 && depth0['materialize-button']),options={hash:{
      'text': ("Button"),
      'icon': ("mdi-action-favorite"),
      'action': ("debug")
    },hashTypes:{'text': "STRING",'icon': "STRING",'action': "STRING"},hashContexts:{'text': depth0,'icon': depth0,'action': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-button", options))));
    data.buffer.push("\n      ");
    data.buffer.push(escapeExpression((helper = helpers['materialize-button'] || (depth0 && depth0['materialize-button']),options={hash:{
      'text': ("Button"),
      'icon': ("mdi-action-favorite"),
      'iconPosition': ("right"),
      'action': ("debug")
    },hashTypes:{'text': "STRING",'icon': "STRING",'iconPosition': "STRING",'action': "STRING"},hashContexts:{'text': depth0,'icon': depth0,'iconPosition': depth0,'action': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-button", options))));
    data.buffer.push("\n\n      <pre class=\" language-markup\">\n        <code class=\" col s12 language-markup\">\n          <span>&#123;&#123;</span>materialize-button text='Button' action='debug'<span>&#125;&#125;</span>\n          <span>&#123;&#123;</span>materialize-button text='Button' icon='mdi-action-favorite' action='debug'<span>&#125;&#125;</span>\n          <span>&#123;&#123;</span>materialize-button text='Button' icon='mdi-action-favorite' iconPosition='right' action='debug'<span>&#125;&#125;</span>\n        </code>\n      </pre>\n    </div>\n  </div>\n  <div class=\"section\">\n    <h4 class=\"col s12 header\">Floating</h4>\n    <div class=\"button-example\">\n      ");
    data.buffer.push(escapeExpression((helper = helpers['materialize-button'] || (depth0 && depth0['materialize-button']),options={hash:{
      'icon': ("mdi-action-favorite"),
      'action': ("debug"),
      'buttonType': ("floating")
    },hashTypes:{'icon': "STRING",'action': "STRING",'buttonType': "STRING"},hashContexts:{'icon': depth0,'action': depth0,'buttonType': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-button", options))));
    data.buffer.push("\n      <pre class=\" language-markup\">\n        <code class=\" col s12 language-markup\">\n          <span>&#123;&#123;</span>materialize-button icon='mdi-action-favorite' action='debug' buttonType='floating'<span>&#125;&#125;</span>\n        </code>\n      </pre>\n    </div>\n  </div>\n  <div class=\"section\">\n    <h4 class=\"col s12 header\">Flat</h4>\n    <div class=\"button-example\">\n      ");
    data.buffer.push(escapeExpression((helper = helpers['materialize-button'] || (depth0 && depth0['materialize-button']),options={hash:{
      'text': ("Flat button"),
      'action': ("debug"),
      'buttonType': ("flat")
    },hashTypes:{'text': "STRING",'action': "STRING",'buttonType': "STRING"},hashContexts:{'text': depth0,'action': depth0,'buttonType': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-button", options))));
    data.buffer.push("\n      <pre class=\" language-markup\">\n        <code class=\" col s12 language-markup\">\n          <span>&#123;&#123;</span>materialize-button text='Flat button' action='debug' buttonType='flat'<span>&#125;&#125;</span>\n        </code>\n      </pre>\n    </div>\n  </div>\n  <div class=\"section\">\n    <h4 class=\"col s12 header\">Submit</h4>\n    <div class=\"button-example\">\n      ");
    data.buffer.push(escapeExpression((helper = helpers['materialize-button-submit'] || (depth0 && depth0['materialize-button-submit']),options={hash:{
      'icon': ("mdi-content-send"),
      'iconPosition': ("right"),
      'text': ("Submit")
    },hashTypes:{'icon': "STRING",'iconPosition': "STRING",'text': "STRING"},hashContexts:{'icon': depth0,'iconPosition': depth0,'text': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-button-submit", options))));
    data.buffer.push("\n      <pre class=\" language-markup\">\n        <code class=\" col s12 language-markup\">\n          <span>&#123;&#123;</span>materialize-button-submit icon='mdi-content-send' iconPosition='right' text='Submit'<span>&#125;&#125;</span>\n        </code>\n      </pre>\n    </div>\n  </div>\n  <div class=\"section\">\n    <h4 class=\"col s12 header\">Large</h4>\n    <div class=\"button-example\">\n      ");
    data.buffer.push(escapeExpression((helper = helpers['materialize-button'] || (depth0 && depth0['materialize-button']),options={hash:{
      'text': ("Large button"),
      'action': ("debug"),
      'buttonType': ("large")
    },hashTypes:{'text': "STRING",'action': "STRING",'buttonType': "STRING"},hashContexts:{'text': depth0,'action': depth0,'buttonType': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-button", options))));
    data.buffer.push("\n      <pre class=\" language-markup\">\n        <code class=\" col s12 language-markup\">\n          <span>&#123;&#123;</span>materialize-button text='Large button' action='debug' buttonType='large'<span>&#125;&#125;</span>\n        </code>\n      </pre>\n    </div>\n  </div>\n  <div class=\"section\">\n    <h4 class=\"col s12 header\">Disabled</h4>\n    <div class=\"button-example\">\n      ");
    data.buffer.push(escapeExpression((helper = helpers['materialize-button'] || (depth0 && depth0['materialize-button']),options={hash:{
      'text': ("Disabled button"),
      'isDisabled': (true)
    },hashTypes:{'text': "STRING",'isDisabled': "BOOLEAN"},hashContexts:{'text': depth0,'isDisabled': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-button", options))));
    data.buffer.push("\n      <pre class=\" language-markup\">\n        <code class=\" col s12 language-markup\">\n          <span>&#123;&#123;</span>materialize-button text='Disabled button' isDisabled=true<span>&#125;&#125;</span>\n        </code>\n      </pre>\n    </div>\n  </div>\n</div>\n");
    return buffer;
    
  });

});
define('dummy/templates/components/materialize-button', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

  function program1(depth0,data) {
    
    var buffer = '';
    data.buffer.push("\n  <i ");
    data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
      'class': ("icon iconPosition")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
    data.buffer.push("></i>\n");
    return buffer;
    }

    stack1 = helpers['if'].call(depth0, "icon", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    stack1 = helpers._triageMustache.call(depth0, "text", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    
  });

});
define('dummy/templates/components/materialize-navbar', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var stack1;
    stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    else { data.buffer.push(''); }
    }

  function program3(depth0,data) {
    
    
    data.buffer.push("<i class='mdi-navigation-menu'></i>");
    }

    data.buffer.push("<div class='nav-wrapper'>\n  <div class='container'>\n    ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("brand-logo")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    <ul id='nav-mobile' class='right side-nav'>\n      ");
    stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </ul>\n  </div>\n  ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("button-collapse"),
      'data-activates': ("nav-mobile")
    },hashTypes:{'class': "STRING",'data-activates': "STRING"},hashContexts:{'class': depth0,'data-activates': depth0},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</div>\n");
    return buffer;
    
  });

});
define('dummy/templates/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    
    data.buffer.push("Buttons<span class=\"badge\">6</span>");
    }

  function program3(depth0,data) {
    
    
    data.buffer.push("Navbar<span class=\"new badge\">1</span>");
    }

    data.buffer.push("<div class=\"section index-banner\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col s12 m9\">\n        <h1 class=\"header\">Ember Addon</h1>\n        <h4 class=\"light red-text lighten-4\">for using <a href=\"http://materializecss.com/\" target=\"_blank\">Materialize</a> - a CSS Framework based on <a href=\"http://www.google.com/design/spec/material-design/introduction.html\" target=\"_blank\">Material Design</a> in Ember applications.</h4>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"github-commit\">\n  <div class=\"container\">\n    <div class=\"commit\">\n      <a id=\"github-button\" href=\"https://github.com/sgasser/ember-cli-materialize\" class=\"btn-flat right grey-text lighten-5 waves-effect waves-light hide-on-med-and-down\">Github</a>\n    </div>\n  </div>\n</div>\n\n<div class='container'>\n  <h2 class=\"col s12 header\">Main features</h2>\n  <div class=\"section\">\n    <div class=\"intro\">\n      <ul>\n        <li>Imports Materialize sass (via <a href=\"https://www.npmjs.com/package/ember-cli-sass\" target=\"_blank\">ember-cli-sass</a>) and fonts into your app.</li>\n        <li>It's a components library for all Materialize components.</li>\n      </ul>\n    </div>\n  </div>\n\n  <h2 class=\"col s12 header\">Usage</h2>\n  <div class=\"section\">\n    <ul class=\"collection\">\n      ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("collection-item")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "buttons", options) : helperMissing.call(depth0, "link-to", "buttons", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n      ");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{
      'class': ("collection-item")
    },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "navbar", options) : helperMissing.call(depth0, "link-to", "navbar", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n    </ul>\n  </div>\n\n  <h2 class=\"col s12 header\">Installation</h2>\n  <div class=\"section\">\n    <pre class=\" language-markup\">\n      <code class=\" col s12 language-markup\">\n        # install via npm\n        $ npm install ember-cli-materialize --save-dev\n        # make ember-cli fetch internal dependencies\n        $ ember g ember-cli-materialize\n      </code>\n    </pre>\n  </diV>\n</div>\n");
    return buffer;
    
  });

});
define('dummy/templates/navbar', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;

  function program1(depth0,data) {
    
    var buffer = '', stack1, helper, options;
    data.buffer.push("\n        <li>");
    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "navbar", options) : helperMissing.call(depth0, "link-to", "navbar", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("</li>\n      ");
    return buffer;
    }
  function program2(depth0,data) {
    
    
    data.buffer.push("Navbar");
    }

    data.buffer.push("<div class=\"section index-banner\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col s12 m9\">\n        <h1 class=\"header\">Navbar</h1>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class='container'>\n  <div class=\"section\">\n    <div class=\"intro\">\n      <h4 class=\"col s12 header\">The component supports one option:</h4>\n      <ul>\n        <li>name, default value <span class=\"default-value badge\">null</span></li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"section\">\n    <h4 class=\"col s12 header\">Navbar with mobile collapse button</h4>\n    <div class=\"button-example\">\n      ");
    stack1 = (helper = helpers['materialize-navbar'] || (depth0 && depth0['materialize-navbar']),options={hash:{
      'name': ("Example")
    },hashTypes:{'name': "STRING"},hashContexts:{'name': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "materialize-navbar", options));
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n      <pre class=\" language-markup\">\n        <code class=\" col s12 language-markup\">\n          <span>&#123;&#123;</span>#materialize-navbar name='Example'<span>&#125;&#125;</span>\n            <span>&#60;</span>li<span>&#62;</span><span>&#123;&#123;</span>#link-to 'navbar'<span>&#125;&#125;</span>Navbar<span>&#123;&#123;</span>/link-to<span>&#125;&#125;</span><span>&#60;</span>/li<span>&#62;</span>\n          <span>&#123;&#123;</span>/materialize-navbar<span>&#125;&#125;</span>\n        </code>\n      </pre>\n    </div>\n  </div>\n</div>\n");
    return buffer;
    
  });

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', '../../config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', '../../app', '../../router', '../../config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';

  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }
  exports['default'] = startApp;

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/routes/buttons.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/buttons.js should pass jshint', function() { 
    ok(true, 'routes/buttons.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['./helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/materialize-button-submit-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent("materialize-button-submit", "MaterializeButtonSubmitComponent", {
    // specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    needs: ["template:components/materialize-button"]
  });

  ember_qunit.test("it renders", function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, "preRender");

    // appends the component to the page
    this.append();
    equal(component._state, "inDOM");
  });

  ember_qunit.test("it is added to the page", function () {
    var component = this.subject();
    this.append();

    ok($("button").length);
  });

});
define('dummy/tests/unit/components/materialize-button-submit-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/materialize-button-submit-test.js should pass jshint', function() { 
    ok(true, 'unit/components/materialize-button-submit-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/materialize-button-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent("materialize-button", "MaterializeButtonComponent", {});

  ember_qunit.test("it renders", function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, "preRender");

    // appends the component to the page
    this.append();
    equal(component._state, "inDOM");
  });

  ember_qunit.test("it is added to the page", function () {
    var component = this.subject();
    this.append();

    ok($("a").length);

    ok($("a").hasClass("waves-light"));
    ok($("a").hasClass("waves-effect"));
    ok($("a").hasClass("btn"));
  });

  ember_qunit.test("text test", function () {
    var component = this.subject();

    Ember['default'].run(function () {
      component.set("text", "Button");
    });

    equal(this.$().html().trim(), "Button");
  });

  ember_qunit.test("icon test", function () {
    var component = this.subject();
    this.append();

    Ember['default'].run(function () {
      component.set("icon", "mdi-action-favorite");
    });

    ok($("i").length);
    ok($("i").hasClass("mdi-action-favorite"));
    ok($("i").hasClass("left"));
  });

  ember_qunit.test("icon with position test", function () {
    var component = this.subject();
    this.append();

    Ember['default'].run(function () {
      component.set("icon", "mdi-action-favorite");
      component.set("iconPosition", "right");
    });

    ok($("i").length);
    ok($("i").hasClass("mdi-action-favorite"));
    ok($("i").hasClass("right"));
  });

  ember_qunit.test("buttonType floating test", function () {
    var component = this.subject();
    this.append();

    Ember['default'].run(function () {
      component.set("buttonType", "floating");
    });

    ok($("a").hasClass("waves-light"));
    ok($("a").hasClass("waves-effect"));
    ok($("a").hasClass("btn-floating"));
  });

  ember_qunit.test("buttonType flat test", function () {
    var component = this.subject();
    this.append();

    Ember['default'].run(function () {
      component.set("buttonType", "flat");
    });

    ok($("a").hasClass("waves-effect"));
    ok($("a").hasClass("btn-flat"));
  });

  ember_qunit.test("buttonType large test", function () {
    var component = this.subject();
    this.append();

    Ember['default'].run(function () {
      component.set("buttonType", "large");
    });

    ok($("a").hasClass("waves-light"));
    ok($("a").hasClass("waves-effect"));
    ok($("a").hasClass("btn-large"));
  });

  ember_qunit.test("isDisabled test", function () {
    var component = this.subject();
    this.append();

    Ember['default'].run(function () {
      component.set("isDisabled", "true");
    });

    ok($("a").hasClass("waves-light"));
    ok($("a").hasClass("disabled"));
    ok($("a").hasClass("btn"));
  });
  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('dummy/tests/unit/components/materialize-button-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/materialize-button-test.js should pass jshint', function() { 
    ok(true, 'unit/components/materialize-button-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/materialize-navbar-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent("materialize-navbar", "MaterializeNavbarComponent", {});

  ember_qunit.test("it renders", function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, "preRender");

    // appends the component to the page
    this.append();
    equal(component._state, "inDOM");
  });

  ember_qunit.test("it is added to the page", function () {
    var component = this.subject();
    this.append();

    ok($("nav").length);
  });

  ember_qunit.test("name test", function () {
    var component = this.subject();
    this.append();

    Ember['default'].run(function () {
      component.set("name", "Brand");
    });

    equal($("a.brand-logo").html().trim(), "Brand");
  });
  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('dummy/tests/unit/components/materialize-navbar-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/materialize-navbar-test.js should pass jshint', function() { 
    ok(true, 'unit/components/materialize-navbar-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/initializers/link-view-test', ['ember', 'ember-cli-materialize/initializers/link-view'], function (Ember, link_view) {

  'use strict';

  var container, application;

  module("LinkViewInitializer", {
    setup: function () {
      Ember['default'].run(function () {
        application = Ember['default'].Application.create();
        container = application.__container__;
        application.deferReadiness();
      });
    }
  });

  test("\"data-activates\" is added to attributeBindings", function () {
    link_view.initialize(container, application);

    var linkView = Ember['default'].LinkView.create();
    ok(linkView.attributeBindings.indexOf("data-activates") !== -1, "'data-activates' must be present in `attributeBindings`");
  });

});
define('dummy/tests/unit/initializers/link-view-test.jshint', function () {

  'use strict';

  module('JSHint - unit/initializers');
  test('unit/initializers/link-view-test.js should pass jshint', function() { 
    ok(true, 'unit/initializers/link-view-test.js should pass jshint.'); 
  });

});
define('dummy/tests/views/application.jshint', function () {

  'use strict';

  module('JSHint - views');
  test('views/application.js should pass jshint', function() { 
    ok(true, 'views/application.js should pass jshint.'); 
  });

});
define('dummy/views/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].View.extend({
    didInsertElement: function () {
      this._super();
      $(".button-collapse").sideNav();
    }
  });

});
/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true,"name":"ember-cli-materialize","version":"0.2.1.166890b2"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map